#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                          &kp W                  &kp E                          &kp R      &kp T                                                          &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&mt CAPS A                     &kp S                  &kp D                          &kp F      &kp G        &mkp LCLK                          &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z               &kp X                  &kp C                          &kp V      &kp B        &kp ESCAPE                         &kp BACKSPACE  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mt LEFT_CONTROL LEFT_CONTROL  &mt LEFT_ALT LEFT_ALT  &mt LEFT_COMMAND LEFT_COMMAND  &kp LG(H)  &lt 2 SPACE  &lt_to_layer_0 3 INT_MUHENKAN      &kp SPACE      &lt 1 ENTER                             &mt AT_SIGN RIGHT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp AT_SIGN       &kp HASH           &kp SLASH      &kp QUESTION     &kp UNDERSCORE                                                     &kp CARET     &kp AMPERSAND  &kp TILDE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1      &kp NUMBER_2       &kp NUMBER_3   &kp NUMBER_4     &kp NUMBER_5    &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE        &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON  &kp EXCLAMATION  &kp LT          &kp GT                       &kp RG(T)             &kp RG(W)     &kp RG(TAB)    &kp RG(A)     &kp RG(R)             &kp RG(F)
&trans            &trans             &trans         &trans           &trans          &trans                       &kp RG(LEFT_BRACKET)  &kp RG(RBKT)                                                     &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans     &trans              &msc SCRL_DOWN  &trans               &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RC(A)  &msc SCRL_RIGHT     &msc SCRL_UP    &msc SCRL_LEFT       &kp RC(E)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans     &kp RG(LEFT_ARROW)  &trans          &kp RG(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                              &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
